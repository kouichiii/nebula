// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model MainCategory {
  id             String         @id @default(cuid())
  name           String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  subCategories  Category[]
}

model Category {
  id             String         @id @default(cuid())
  name           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  mainCategoryId String
  mainCategory   MainCategory   @relation(fields: [mainCategoryId], references: [id])
  articles       Article[]
}

model Article {
  id            String      @id @default(cuid())
  title         String
  excerpt       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String      @db.Uuid
  categoryId    String      
  tags          String[]
  storagePath   String
  user          User        @relation(fields: [userId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  likes         Like[]
  bookmarks      Bookmark[]
}

model User {
  id        String    @id
  email     String    @unique
  name      String
  iconUrl   String?
  bio       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[]
  likes     Like[]
  bookmarks Bookmark[]
}

model Bookmark {
  id        String   @id @default(uuid())
  userId    String   // UUIDではなくStringに変更
  articleId String
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}

model Like {
  id        String   @id @default(uuid())
  userId    String   // UUIDではなくStringに変更
  articleId String
  createdAt DateTime @default(now())
  
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId])
  @@index([userId])
  @@index([articleId])
}
